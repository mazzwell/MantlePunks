var w=Object.defineProperty;var C=(i,e,t)=>e in i?w(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var o=(i,e,t)=>(C(i,typeof e!="symbol"?e+"":e,t),t);import{N as y,K as b,M as T,bK as E,P as R,a5 as g,Q as v,s as u,R as p,U as f,B as W,aO as S}from"./index.63d6a091.js";import{C as A,a as B,b as O,G as F}from"./contract-appuri-04bfc126.browser.esm.a030217c.js";import{C as V}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as M}from"./contract-platform-fee-bb93a8e4.browser.esm.496a1100.js";import{C as P}from"./contract-roles-246fe733.browser.esm.e8dae6b2.js";import{C as N}from"./contract-sales-e8c058ab.browser.esm.b7c588a1.js";import{a as x}from"./erc-20-f0dd5e9a.browser.esm.67fe6d49.js";import{S as D}from"./erc-20-standard-c5ca6f59.browser.esm.fef0457a.js";import"./assertEnabled-f15292a2.browser.esm.bd2a0b65.js";import"./drop-claim-conditions-6965683b.browser.esm.e45fbd7e.js";import"./index.8a1c7d0b.js";import"./setErc20Allowance-2030d581.browser.esm.75a2d3b6.js";class H{constructor(e,t){this.contractWrapper=e,this.events=t}async getAllHolderBalances(){const t=(await this.events.getEvents("Transfer")).map(a=>a.data),r={};t.forEach(a=>{const n=a==null?void 0:a.from,c=a==null?void 0:a.to,d=a==null?void 0:a.value;n!==u&&(n in r||(r[n]=W.from(0)),r[n]=r[n].sub(d)),c!==u&&(c in r||(r[c]=W.from(0)),r[c]=r[c].add(d))});const s=Object.entries(r),h=await Promise.all(s.map(a=>{let[,n]=a;return S(this.contractWrapper.getProvider(),this.contractWrapper.address,n)}));return s.map((a,n)=>{let[c]=a;return{holder:c,balance:h[n]}})}}const m=class extends D{constructor(t,r,s){let h=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},a=arguments.length>4?arguments[4]:void 0,n=arguments.length>5?arguments[5]:void 0,c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new b(t,r,a,h,s);super(c,s,n);o(this,"mint",p(async t=>this.erc20.mint.prepare(t)));o(this,"mintTo",p(async(t,r)=>this.erc20.mintTo.prepare(t,r)));o(this,"mintBatchTo",p(async t=>this.erc20.mintBatchTo.prepare(t)));o(this,"delegateTo",p(async t=>f.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await g(t)]})));o(this,"burn",p(t=>this.erc20.burn.prepare(t)));o(this,"burnFrom",p(async(t,r)=>this.erc20.burnFrom.prepare(t,r)));this.abi=T.parse(a||[]),this.metadata=new A(this.contractWrapper,E,this.storage),this.app=new B(this.contractWrapper,this.metadata,this.storage),this.roles=new P(this.contractWrapper,m.contractRoles),this.sales=new N(this.contractWrapper),this.events=new O(this.contractWrapper),this.history=new H(this.contractWrapper,this.events),this.encoder=new R(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.platformFees=new M(this.contractWrapper),this.interceptor=new V(this.contractWrapper),this.signature=new x(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[t]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await g(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[v("transfer"),u])}async getMintTransaction(t,r){return this.erc20.getMintTransaction(t,r)}async prepare(t,r,s){return f.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:s})}async call(t,r,s){return this.contractWrapper.call(t,r,s)}};let l=m;o(l,"contractRoles",y);export{l as Token};
